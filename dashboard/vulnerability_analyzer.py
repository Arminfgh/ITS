"""
Dynamische Vulnerability Analysis - funktioniert mit Demo UND echten Scans
"""

def analyze_vulnerabilities_dynamic(scan_data):
    """
    Analysiert Vulnerabilities basierend auf echten Scan-Daten
    
    Args:
        scan_data: Dict mit Scan-Ergebnissen (hosts, ports, etc.)
    
    Returns:
        Dict mit critical_vulns und warnings
    """
    critical_vulns = []
    warnings = []
    
    # Gehe durch alle Hosts und deren Ports
    for host in scan_data.get('hosts', []):
        host_ip = host.get('ip_address')
        hostname = host.get('hostname', 'Unknown')
        
        for port_info in host.get('open_ports', []):
            port = port_info.get('port')
            service = port_info.get('service', 'unknown')
            
            # FTP - Port 21
            if port == 21:
                critical_vulns.append({
                    'host': host_ip,
                    'hostname': hostname,
                    'port': 21,
                    'service': 'FTP',
                    'vuln': 'FTP - Unverschlüsselte Übertragung',
                    'cvss': 7.5,
                    'cve': 'CVE-1999-0190',
                    'risk': 'Credentials im Klartext übertragen',
                    'fix': 'SFTP (Port 22) verwenden'
                })
            
            # Telnet - Port 23
            elif port == 23:
                critical_vulns.append({
                    'host': host_ip,
                    'hostname': hostname,
                    'port': 23,
                    'service': 'Telnet',
                    'vuln': 'Telnet - Keine Verschlüsselung',
                    'cvss': 9.8,
                    'cve': 'CVE-1999-0619',
                    'risk': 'Komplette Session lesbar',
                    'fix': 'SSH verwenden, Telnet deaktivieren'
                })
            
            # SMB - Port 445
            elif port == 445:
                critical_vulns.append({
                    'host': host_ip,
                    'hostname': hostname,
                    'port': 445,
                    'service': 'SMB',
                    'vuln': 'SMB - EternalBlue Vulnerability',
                    'cvss': 9.3,
                    'cve': 'CVE-2017-0144',
                    'risk': 'Remote Code Execution möglich',
                    'fix': 'SMBv1 deaktivieren, Patches installieren'
                })
            
            # MySQL - Port 3306
            elif port == 3306:
                warnings.append({
                    'host': host_ip,
                    'hostname': hostname,
                    'port': 3306,
                    'service': 'MySQL',
                    'issue': 'Datenbank exponiert',
                    'risk': 'SQL-Injection möglich',
                    'fix': 'Bind to localhost, Firewall-Regeln'
                })
            
            # RDP - Port 3389
            elif port == 3389:
                warnings.append({
                    'host': host_ip,
                    'hostname': hostname,
                    'port': 3389,
                    'service': 'RDP',
                    'issue': 'RDP exponiert',
                    'risk': 'Brute-Force Angriffe möglich',
                    'fix': 'VPN-only Access, MFA aktivieren'
                })
            
            # MSSQL - Port 1433
            elif port == 1433:
                warnings.append({
                    'host': host_ip,
                    'hostname': hostname,
                    'port': 1433,
                    'service': 'MSSQL',
                    'issue': 'Datenbank exponiert',
                    'risk': 'SQL-Injection möglich',
                    'fix': 'Bind to localhost, Firewall-Regeln'
                })
            
            # PostgreSQL - Port 5432
            elif port == 5432:
                warnings.append({
                    'host': host_ip,
                    'hostname': hostname,
                    'port': 5432,
                    'service': 'PostgreSQL',
                    'issue': 'Datenbank exponiert',
                    'risk': 'SQL-Injection möglich',
                    'fix': 'Bind to localhost, Firewall-Regeln'
                })
    
    return {
        'critical_vulns': critical_vulns,
        'warnings': warnings
    }