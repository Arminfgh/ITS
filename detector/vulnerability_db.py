"""
SecureOffice Hub - Vulnerability Database
Prüft offene Ports gegen bekannte Schwachstellen
Zeigt IT-Sicherheits-Wissen
"""

from typing import List, Dict, Optional
from dataclasses import dataclass
from enum import Enum


class VulnSeverity(Enum):
    """Schweregrad-Levels"""
    CRITICAL = "CRITICAL"
    HIGH = "HIGH"
    MEDIUM = "MEDIUM"
    LOW = "LOW"
    INFO = "INFO"


@dataclass
class Vulnerability:
    """Schwachstellen-Datenstruktur"""
    vuln_id: str
    port: int
    service: str
    severity: VulnSeverity
    title: str
    description: str
    risk: str
    recommendation: str
    cve_ids: List[str] = None
    cvss_score: float = 0.0


class VulnerabilityDatabase:
    """
    Datenbank bekannter Schwachstellen
    Zeigt Verständnis von CVEs und Security Best Practices
    """
    
    def __init__(self):
        self.vulnerabilities = self._load_vulnerability_database()
    
    def _load_vulnerability_database(self) -> Dict[int, List[Vulnerability]]:
        """
        Lädt Vulnerability-Datenbank
        In Produktion: würde aus echter Datenbank/API kommen
        """
        vuln_db = {}
        
        # Port 21 - FTP
        vuln_db[21] = [
            Vulnerability(
                vuln_id="FTP-001",
                port=21,
                service="FTP",
                severity=VulnSeverity.CRITICAL,
                title="FTP - Unverschlüsselte Übertragung",
                description="FTP überträgt Daten und Credentials im Klartext",
                risk="Credentials, Passwörter und Dateiinhalte können mitgelesen werden",
                recommendation="SFTP (Port 22) oder FTPS verwenden. FTP deaktivieren.",
                cve_ids=["CVE-1999-0190", "CVE-2010-4221"],
                cvss_score=7.5
            ),
            Vulnerability(
                vuln_id="FTP-002",
                port=21,
                service="FTP",
                severity=VulnSeverity.HIGH,
                title="FTP Bounce Attack",
                description="FTP kann für Port-Scanning missbraucht werden",
                risk="Angreifer können interne Netzwerke scannen",
                recommendation="FTP-Proxy verwenden oder deaktivieren",
                cve_ids=["CVE-1999-0017"],
                cvss_score=6.8
            )
        ]
        
        # Port 22 - SSH
        vuln_db[22] = [
            Vulnerability(
                vuln_id="SSH-001",
                port=22,
                service="SSH",
                severity=VulnSeverity.MEDIUM,
                title="SSH Brute-Force Anfälligkeit",
                description="SSH kann durch Brute-Force-Angriffe kompromittiert werden",
                risk="Bei schwachen Passwörtern möglich, unbefugter Zugriff",
                recommendation="Key-basierte Auth, Fail2Ban, starke Passwörter, MFA",
                cve_ids=[],
                cvss_score=5.3
            )
        ]
        
        # Port 23 - Telnet
        vuln_db[23] = [
            Vulnerability(
                vuln_id="TELNET-001",
                port=23,
                service="Telnet",
                severity=VulnSeverity.CRITICAL,
                title="Telnet - Keine Verschlüsselung",
                description="Telnet ist komplett unverschlüsselt - EXTREM gefährlich!",
                risk="Komplette Session lesbar, Credential-Diebstahl trivial",
                recommendation="SOFORT SSH (Port 22) verwenden. Telnet deaktivieren!",
                cve_ids=["CVE-1999-0619"],
                cvss_score=9.8
            )
        ]
        
        # Port 80 - HTTP
        vuln_db[80] = [
            Vulnerability(
                vuln_id="HTTP-001",
                port=80,
                service="HTTP",
                severity=VulnSeverity.MEDIUM,
                title="HTTP - Unverschlüsselter Web-Traffic",
                description="HTTP überträgt Daten unverschlüsselt",
                risk="Man-in-the-Middle, Session Hijacking, Credential Theft",
                recommendation="HTTPS erzwingen (Port 443), HTTP-Redirect einrichten",
                cve_ids=[],
                cvss_score=5.3
            )
        ]
        
        # Port 443 - HTTPS
        vuln_db[443] = [
            Vulnerability(
                vuln_id="HTTPS-001",
                port=443,
                service="HTTPS",
                severity=VulnSeverity.LOW,
                title="TLS/SSL Konfiguration prüfen",
                description="HTTPS ist gut, aber Konfiguration wichtig",
                risk="Schwache Ciphers oder alte TLS-Versionen",
                recommendation="TLS 1.2+, starke Ciphers, gültige Zertifikate",
                cve_ids=[],
                cvss_score=3.7
            )
        ]
        
        # Port 445 - SMB
        vuln_db[445] = [
            Vulnerability(
                vuln_id="SMB-001",
                port=445,
                service="SMB",
                severity=VulnSeverity.CRITICAL,
                title="SMB - EternalBlue (MS17-010)",
                description="SMBv1 anfällig für WannaCry-Exploit",
                risk="Remote Code Execution, Ransomware-Infektionen",
                recommendation="SMBv1 deaktivieren, Patches installieren, Firewall",
                cve_ids=["CVE-2017-0144", "CVE-2017-0145"],
                cvss_score=9.3
            ),
            Vulnerability(
                vuln_id="SMB-002",
                port=445,
                service="SMB",
                severity=VulnSeverity.HIGH,
                title="SMB Relay Attack",
                description="SMB-Authentifizierung kann abgefangen werden",
                risk="NTLM-Hash-Diebstahl, Lateral Movement",
                recommendation="SMB-Signing erzwingen, NTLMv2 only",
                cve_ids=[],
                cvss_score=7.5
            )
        ]
        
        # Port 3306 - MySQL
        vuln_db[3306] = [
            Vulnerability(
                vuln_id="MYSQL-001",
                port=3306,
                service="MySQL",
                severity=VulnSeverity.HIGH,
                title="MySQL direkt exponiert",
                description="Datenbank sollte nicht vom Internet erreichbar sein",
                risk="SQL-Injection, Brute-Force, Data Breach",
                recommendation="Bind to localhost, nur über VPN, Firewall-Regeln",
                cve_ids=[],
                cvss_score=7.5
            )
        ]
        
        # Port 3389 - RDP
        vuln_db[3389] = [
            Vulnerability(
                vuln_id="RDP-001",
                port=3389,
                service="RDP",
                severity=VulnSeverity.HIGH,
                title="RDP - BlueKeep Vulnerability",
                description="Ungepatchte RDP-Versionen anfällig für Remote Code Execution",
                risk="Wormable Exploit, komplette Systemübernahme",
                recommendation="Patches installieren, NLA aktivieren, MFA, VPN-only",
                cve_ids=["CVE-2019-0708"],
                cvss_score=9.8
            ),
            Vulnerability(
                vuln_id="RDP-002",
                port=3389,
                service="RDP",
                severity=VulnSeverity.HIGH,
                title="RDP Brute-Force Angriffe",
                description="RDP ist häufiges Ziel für Brute-Force",
                risk="Unbefugter Zugriff bei schwachen Passwörtern",
                recommendation="Account Lockout, starke Passwörter, MFA, Rate Limiting",
                cve_ids=[],
                cvss_score=7.5
            )
        ]
        
        # Port 5432 - PostgreSQL
        vuln_db[5432] = [
            Vulnerability(
                vuln_id="PGSQL-001",
                port=5432,
                service="PostgreSQL",
                severity=VulnSeverity.HIGH,
                title="PostgreSQL exponiert",
                description="Datenbank direkt vom Internet erreichbar",
                risk="SQL-Injection, Unauthorized Access, Data Breach",
                recommendation="Bind to localhost, VPN-only Access, pg_hba.conf härten",
                cve_ids=[],
                cvss_score=7.5
            )
        ]
        
        # Port 1433 - MSSQL
        vuln_db[1433] = [
            Vulnerability(
                vuln_id="MSSQL-001",
                port=1433,
                service="MSSQL",
                severity=VulnSeverity.HIGH,
                title="MS SQL Server exponiert",
                description="SQL Server sollte nicht öffentlich erreichbar sein",
                risk="SQL-Injection, xp_cmdshell exploits, Data Breach",
                recommendation="Firewall-Regeln, VPN-only, sa-Account deaktivieren",
                cve_ids=[],
                cvss_score=8.0
            )
        ]
        
        return vuln_db
    
    def check_port(self, port: int, service: str = None) -> List[Vulnerability]:
        """
        Prüft Port gegen Vulnerability-Datenbank
        
        Args:
            port: Port-Nummer
            service: Service-Name (optional)
        
        Returns:
            Liste von Vulnerabilities für diesen Port
        """
        return self.vulnerabilities.get(port, [])
    
    def analyze_scan_results(self, scan_results: List[Dict]) -> Dict:
        """
        Analysiert komplette Scan-Ergebnisse
        
        Args:
            scan_results: Liste von Host-Dicts mit open_ports
        
        Returns:
            Dictionary mit Vulnerability-Analyse
        """
        analysis = {
            'total_vulnerabilities': 0,
            'by_severity': {
                'CRITICAL': [],
                'HIGH': [],
                'MEDIUM': [],
                'LOW': [],
                'INFO': []
            },
            'by_host': {},
            'top_risks': [],
            'recommendations': []
        }
        
        for host in scan_results:
            host_ip = host.get('ip_address')
            host_vulns = []
            
            for port_info in host.get('open_ports', []):
                port = port_info.get('port')
                service = port_info.get('service', 'unknown')
                
                # Prüfe gegen Datenbank
                vulns = self.check_port(port, service)
                
                for vuln in vulns:
                    # Füge Host-Info hinzu
                    vuln_dict = {
                        'host': host_ip,
                        'hostname': host.get('hostname', 'unknown'),
                        'port': port,
                        'service': service,
                        'vuln_id': vuln.vuln_id,
                        'severity': vuln.severity.value,
                        'title': vuln.title,
                        'description': vuln.description,
                        'risk': vuln.risk,
                        'recommendation': vuln.recommendation,
                        'cvss_score': vuln.cvss_score,
                        'cve_ids': vuln.cve_ids or []
                    }
                    
                    host_vulns.append(vuln_dict)
                    analysis['by_severity'][vuln.severity.value].append(vuln_dict)
                    analysis['total_vulnerabilities'] += 1
            
            if host_vulns:
                analysis['by_host'][host_ip] = host_vulns
        
        # Top Risks ermitteln (höchste CVSS)
        all_vulns = []
        for severity_list in analysis['by_severity'].values():
            all_vulns.extend(severity_list)
        
        analysis['top_risks'] = sorted(
            all_vulns,
            key=lambda x: x['cvss_score'],
            reverse=True
        )[:10]
        
        # Generelle Empfehlungen
        analysis['recommendations'] = self._generate_recommendations(analysis)
        
        return analysis
    
    def _generate_recommendations(self, analysis: Dict) -> List[str]:
        """Generiert Sicherheitsempfehlungen basierend auf Findings"""
        recommendations = []
        
        # Critical Findings
        if analysis['by_severity']['CRITICAL']:
            recommendations.append({
                'priority': 'CRITICAL',
                'category': 'Sofortmaßnahmen',
                'action': f"{len(analysis['by_severity']['CRITICAL'])} kritische Schwachstellen sofort beheben!",
                'details': 'Telnet/FTP deaktivieren, SMB patchen, Datenbanken absichern'
            })
        
        # Datenbanken
        db_ports = [3306, 5432, 1433]
        if any(v['port'] in db_ports for v in analysis['top_risks']):
            recommendations.append({
                'priority': 'HIGH',
                'category': 'Datenbank-Sicherheit',
                'action': 'Datenbanken nicht direkt exponieren',
                'details': 'VPN-only Access, Firewall-Regeln, bind to localhost'
            })
        
        # Remote Access
        remote_ports = [22, 3389, 23]
        if any(v['port'] in remote_ports for v in analysis['top_risks']):
            recommendations.append({
                'priority': 'HIGH',
                'category': 'Remote Access Security',
                'action': 'Remote-Zugriff härten',
                'details': 'MFA aktivieren, Key-basierte Auth, VPN verwenden'
            })
        
        # Verschlüsselung
        unencrypted_ports = [21, 23, 80]
        if any(v['port'] in unencrypted_ports for v in analysis['top_risks']):
            recommendations.append({
                'priority': 'MEDIUM',
                'category': 'Verschlüsselung',
                'action': 'Unverschlüsselte Protokolle ersetzen',
                'details': 'FTP→SFTP, Telnet→SSH, HTTP→HTTPS'
            })
        
        # Firewall
        recommendations.append({
            'priority': 'HIGH',
            'category': 'Firewall',
            'action': 'Firewall-Regeln implementieren',
            'details': 'Default Deny Policy, nur benötigte Ports öffnen'
        })
        
        # Monitoring
        recommendations.append({
            'priority': 'MEDIUM',
            'category': 'Monitoring',
            'action': 'Security Monitoring einrichten',
            'details': 'IDS/IPS, Log-Monitoring, Anomalie-Erkennung'
        })
        
        return recommendations
    
    def get_vulnerability_summary(self, analysis: Dict) -> str:
        """
        Generiert lesbare Zusammenfassung
        """
        summary = f"""
╔══════════════════════════════════════════════════════════════════╗
║           VULNERABILITY ASSESSMENT SUMMARY                       ║
╚══════════════════════════════════════════════════════════════════╝

📊 GESAMTÜBERSICHT:
   Total Vulnerabilities: {analysis['total_vulnerabilities']}
   
   🔴 CRITICAL: {len(analysis['by_severity']['CRITICAL'])}
   🟠 HIGH:     {len(analysis['by_severity']['HIGH'])}
   🟡 MEDIUM:   {len(analysis['by_severity']['MEDIUM'])}
   🟢 LOW:      {len(analysis['by_severity']['LOW'])}
   ℹ️  INFO:     {len(analysis['by_severity']['INFO'])}

🎯 TOP 3 RISIKEN:
"""
        
        for i, vuln in enumerate(analysis['top_risks'][:3], 1):
            summary += f"""
   [{i}] {vuln['title']}
       Host: {vuln['host']} | Port: {vuln['port']}
       CVSS: {vuln['cvss_score']}/10 | Severity: {vuln['severity']}
       → {vuln['recommendation']}
"""
        
        summary += f"""
💡 WICHTIGSTE EMPFEHLUNGEN:
"""
        
        for rec in analysis['recommendations'][:5]:
            summary += f"""
   [{rec['priority']}] {rec['category']}
       {rec['action']}
       Details: {rec['details']}
"""
        
        return summary


# Demo/Test
if __name__ == "__main__":
    print("🔍 Teste Vulnerability Database...\n")
    
    db = VulnerabilityDatabase()
    
    # Test: Prüfe einzelne Ports
    print("="*70)
    print("TEST 1: Einzelne Port-Checks")
    print("="*70)
    
    test_ports = [21, 23, 445, 3389]
    
    for port in test_ports:
        vulns = db.check_port(port)
        print(f"\n🔌 Port {port}:")
        for vuln in vulns:
            print(f"   [{vuln.severity.value}] {vuln.title}")
            print(f"   CVSS: {vuln.cvss_score}/10")
    
    # Test: Analysiere Mock-Scan
    print("\n" + "="*70)
    print("TEST 2: Komplette Scan-Analyse")
    print("="*70)
    
    mock_scan = [
        {
            'ip_address': '192.168.1.10',
            'hostname': 'server1',
            'open_ports': [
                {'port': 21, 'service': 'FTP'},
                {'port': 23, 'service': 'Telnet'},
                {'port': 445, 'service': 'SMB'}
            ]
        },
        {
            'ip_address': '192.168.1.20',
            'hostname': 'database',
            'open_ports': [
                {'port': 3306, 'service': 'MySQL'},
                {'port': 3389, 'service': 'RDP'}
            ]
        }
    ]
    
    analysis = db.analyze_scan_results(mock_scan)
    print(db.get_vulnerability_summary(analysis))
    
    print("\n✅ Vulnerability Database Test abgeschlossen!")